<template>
  <div style="padding: 8px;">
    <!-- Connection Status Header -->
    <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 12px; padding: 4px 0;">
      <div style="font-weight: 500; font-size: 14px;">ESS Control</div>
      <a-tag
        :color="connectionColor"
        style="margin: 0;"
      >
        {{ connectionStatus }}
      </a-tag>
    </div>

    <!-- Subject Selection -->
    <div class="system-config" style="border: 1px solid #d9d9d9; padding: 8px; margin-bottom: 12px;">
       <a-form-item label="Subject" style="margin-bottom: 0;">
        <a-select
          v-model:value="dserv.state.subject"
          size="small"
          style="flex: 1; min-width: 140px;"
          :disabled="isSystemBusy"
          @change="setSubject"
        >
          <a-select-option v-for="subject in subjects" :key="subject" :value="subject">
            {{ subject }}
          </a-select-option>
        </a-select>
      </a-form-item>
    </div>

    <!-- Control Buttons -->
    <div class="control-buttons" style="margin-bottom: 12px;">
      <a-space size="small">
        <a-button
          type="primary"
          size="small"
          :loading="loading.start"
          :disabled="isSystemBusy || dserv.state.status === 'Running' || !dserv.state.currentVariant"
          @click="startExperiment"
        >
          Go
        </a-button>
        <a-button
          danger
          size="small"
          :loading="loading.stop"
          :disabled="isSystemBusy || dserv.state.status !== 'Running'"
          @click="stopExperiment"
        >
          Stop
        </a-button>
        <a-button
          size="small"
          :loading="loading.reset"
          :disabled="isSystemBusy"
          @click="resetExperiment"
        >
          Reset
        </a-button>
      </a-space>
    </div>

    <!-- Status Display -->
    <div style="margin-bottom: 12px; font-size: 12px;">
      <div style="display: flex; align-items: center; gap: 8px;">
        <div class="obs-indicator" :class="{ 'is-active': dserv.state.inObs }"></div>
        <div style="flex: 1; display: flex; justify-content: space-between; align-items: center;">
          <span><strong>Status:</strong></span>
          <a-tag
            :color="getStatusColor(dserv.state.status)"
            style="margin: 0;"
          >
            {{ dserv.state.status }}
          </a-tag>
        </div>
      </div>

      <!-- Indent subsequent lines to align with Status text -->
      <div style="padding-left: 20px;">
        <!-- Show loading indicator when system is busy -->
        <div
          v-if="isSystemBusy"
          style="display: flex; justify-content: space-between; align-items: center; margin-top: 4px;"
        >
          <span><strong>ESS:</strong></span>
          <a-tag color="orange" style="margin: 0;">
            {{ dserv.state.essStatus }}
          </a-tag>
        </div>

        <div
          v-if="dserv.state.obsCount"
          style="display: flex; justify-content: space-between; align-items: center; margin-top: 4px;"
        >
          <span><strong>Obs:</strong></span>
          <a-tag
            :color="dserv.state.inObs ? 'red' : 'default'"
            style="margin: 0;"
          >
            {{ dserv.state.obsCount }}
          </a-tag>
        </div>
      </div>
    </div>

    <!-- System Configuration -->
    <div class="system-config" style="border: 1px solid #d9d9d9; padding: 8px; margin-bottom: 12px;">
      <div style="font-weight: 500; margin-bottom: 8px; font-size: 12px;">
        System Configuration
        <a-spin v-if="isSystemBusy" size="small" style="margin-left: 8px;" />
      </div>

      <a-form-item label="System" style="margin-bottom: 8px;">
        <div style="display: flex; align-items: center; gap: 4px;">
          <a-select
            v-model:value="dserv.state.currentSystem"
            size="small"
            style="flex: 1; min-width: 140px;"
            :loading="loading.system || isSystemBusy"
            :disabled="isSystemBusy"
            @change="setSystem"
          >
            <a-select-option v-for="system in dserv.state.systems" :key="system" :value="system">
              {{ system }}
            </a-select-option>
          </a-select>
          <a-button
            size="small"
            :icon="h(ReloadOutlined)"
            :disabled="isSystemBusy"
            @click="reloadSystem"
            style="width: 24px; height: 24px;"
          />
        </div>
      </a-form-item>

      <a-form-item label="Protocol" style="margin-bottom: 8px;">
        <div style="display: flex; align-items: center; gap: 4px;">
          <a-select
            v-model:value="dserv.state.currentProtocol"
            size="small"
            style="flex: 1; min-width: 140px;"
            :loading="loading.protocol || isSystemBusy"
            :disabled="isSystemBusy || !dserv.state.currentSystem"
            @change="setProtocol"
          >
            <a-select-option v-for="protocol in dserv.state.protocols" :key="protocol" :value="protocol">
              {{ protocol }}
            </a-select-option>
          </a-select>
          <a-button
            size="small"
            :icon="h(ReloadOutlined)"
            :disabled="isSystemBusy"
            @click="reloadProtocol"
            style="width: 24px; height: 24px;"
          />
        </div>
      </a-form-item>

      <a-form-item label="Variant" style="margin-bottom: 0;">
        <div style="display: flex; align-items: center; gap: 4px;">
          <a-select
            v-model:value="dserv.state.currentVariant"
            size="small"
            style="flex: 1; min-width: 140px;"
            :loading="loading.variant || isSystemBusy"
            :disabled="isSystemBusy || !dserv.state.currentProtocol"
            @change="setVariant"
          >
            <a-select-option v-for="variant in dserv.state.variants" :key="variant" :value="variant">
              {{ variant }}
            </a-select-option>
          </a-select>
          <a-button
            size="small"
            :icon="h(ReloadOutlined)"
            :disabled="isSystemBusy"
            @click="reloadVariant"
            style="width: 24px; height: 24px;"
          />
        </div>
      </a-form-item>
    </div>

    <!-- Settings Management -->
    <div style="border: 1px solid #d9d9d9; padding: 8px; margin-bottom: 12px;">
      <div style="font-weight: 500; margin-bottom: 8px; font-size: 12px;">Settings</div>
      <div style="display: flex; justify-content: center;">
        <a-space size="small" wrap>
          <a-button size="small" :disabled="isSystemBusy" @click="saveSettings">Save</a-button>
          <a-button size="small" :disabled="isSystemBusy" @click="resetSettings">Reset</a-button>
          <a-button size="small" :disabled="isSystemBusy" @click="loadSettings">Load</a-button>
        </a-space>
      </div>
    </div>


    <!-- Quick Performance Summary (minimal) -->
    <div v-if="showPerformance" style="border: 1px solid #d9d9d9; padding: 8px;">
      <div style="font-weight: 500; margin-bottom: 8px; font-size: 12px;">Performance</div>
      <div style="font-size: 11px;">
        <div>{{ dserv.state.blockPctCorrect }}% Correct</div>
        <div>{{ dserv.state.blockPctComplete }}% Complete</div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, h, watch } from 'vue'
import { ReloadOutlined } from '@ant-design/icons-vue'
import { dserv } from '../services/dserv.js'

// Define emits for terminal logging
const emit = defineEmits(['status-update'])

// Watch for dserv connection status
watch(() => dserv.state.connected, (connected) => {
  if (connected) {
    logToTerminal('Connected to dserv', 'success')
  } else {
    logToTerminal('Disconnected from dserv', 'error')
  }
})

// Local state
const subjects = ['sally', 'momo', 'riker', 'glenn', 'human']

const loading = ref({
  start: false,
  stop: false,
  reset: false,
  system: false,
  protocol: false,
  variant: false
})

// Computed properties
const showPerformance = computed(() => {
  return dserv.state.blockPctComplete > 0 || dserv.state.blockPctCorrect > 0
})

const isSystemBusy = computed(() => {
  return dserv.state.essStatus === 'loading'
})

const connectionColor = computed(() => {
  if (!dserv.state.connected) return 'red'
  if (isSystemBusy.value) return 'orange'
  return 'green'
})

const connectionStatus = computed(() => {
  if (!dserv.state.connected) return 'Disconnected'
  if (isSystemBusy.value) return 'Loading...'
  return 'Connected'
})

// Watch for loading state changes
watch(isSystemBusy, (isBusy) => {
  if (!isBusy) {
    // Reset all loading states when system is no longer busy
    loading.value.system = false
    loading.value.protocol = false
    loading.value.variant = false
  }
})

// Watch for successful loading completion
watch(() => dserv.state.essStatus, (newStatus, oldStatus) => {
  if (oldStatus === 'loading' && newStatus === 'stopped') {
    logToTerminal('System loading completed', 'success')
  }
})

// Helper function to emit terminal logs
function logToTerminal(message, type = 'normal') {
  emit('status-update', { message, type })
}

// Load initial data from dserv
watch(() => dserv.state.subject, async (newSubject) => {
  if (newSubject) {
    // Uncomment and implement when subject data loading is available:
    // try {
    //   await dserv.loadSubjectData(newSubject)
    //   logToTerminal(`Loaded data for subject: ${newSubject}`, 'success')
    // } catch (error) {
    //   console.error('Failed to load subject data:', error)
    //   logToTerminal(`Failed to load subject data: ${error.message}`, 'error')
    // }
  }
})

// Methods
async function setSubject(subject) {
  try {
    await dserv.setSubject(subject)
    logToTerminal(`Subject set to: ${subject}`, 'success')
  } catch (error) {
    console.error('Failed to set subject:', error)
    logToTerminal(`Failed to set subject: ${error.message}`, 'error')
  }
}

async function setSystem(system) {
  loading.value.system = true
  try {
    await dserv.setSystem(system)
    logToTerminal(`System loaded: ${system}`, 'success')
  } catch (error) {
    console.error('Failed to set system:', error)
    logToTerminal(`Failed to load system: ${error.message}`, 'error')
  } finally {
    loading.value.system = false
  }
}

async function setProtocol(protocol) {
  loading.value.protocol = true
  try {
    await dserv.setProtocol(protocol)
    logToTerminal(`Protocol loaded: ${protocol}`, 'success')
  } catch (error) {
    console.error('Failed to set protocol:', error)
    logToTerminal(`Failed to load protocol: ${error.message}`, 'error')
  } finally {
    loading.value.protocol = false
  }
}

async function setVariant(variant) {
  loading.value.variant = true
  try {
    await dserv.setVariant(variant)
    logToTerminal(`Variant loaded: ${variant}`, 'success')
  } catch (error) {
    console.error('Failed to set variant:', error)
    logToTerminal(`Failed to load variant: ${error.message}`, 'error')
  } finally {
    loading.value.variant = false
  }
}

async function startExperiment() {
  loading.value.start = true
  try {
    await dserv.startExperiment()
    logToTerminal('Experiment started', 'success')
  } catch (error) {
    console.error('Failed to start experiment:', error)
    logToTerminal(`Failed to start: ${error.message}`, 'error')
  } finally {
    loading.value.start = false
  }
}

async function stopExperiment() {
  loading.value.stop = true
  try {
    await dserv.stopExperiment()
    logToTerminal('Experiment stopped', 'success')
  } catch (error) {
    console.error('Failed to stop experiment:', error)
    logToTerminal(`Failed to stop: ${error.message}`, 'error')
  } finally {
    loading.value.stop = false
  }
}

async function resetExperiment() {
  loading.value.reset = true
  try {
    await dserv.resetExperiment()
    logToTerminal('Experiment reset', 'success')
  } catch (error) {
    console.error('Failed to reset experiment:', error)
    logToTerminal(`Failed to reset: ${error.message}`, 'error')
  } finally {
    loading.value.reset = false
  }
}

async function reloadSystem() {
  try {
    await dserv.essCommand('ess::reload_system')
    logToTerminal('System reloaded', 'success')
  } catch (error) {
    console.error('Failed to reload system:', error)
    logToTerminal(`Failed to reload system: ${error.message}`, 'error')
  }
}

async function reloadProtocol() {
  try {
    await dserv.essCommand('ess::reload_protocol')
    logToTerminal('Protocol reloaded', 'success')
  } catch (error) {
    console.error('Failed to reload protocol:', error)
    logToTerminal(`Failed to reload protocol: ${error.message}`, 'error')
  }
}

async function reloadVariant() {
  try {
    await dserv.essCommand('ess::reload_variant')
    logToTerminal('Variant reloaded', 'success')
  } catch (error) {
    console.error('Failed to reload variant:', error)
    logToTerminal(`Failed to reload variant: ${error.message}`, 'error')
  }
}

async function saveSettings() {
  try {
    await dserv.essCommand('ess::save_settings')
    logToTerminal('Settings saved', 'success')
  } catch (error) {
    console.error('Failed to save settings:', error)
    logToTerminal(`Failed to save settings: ${error.message}`, 'error')
  }
}

async function resetSettings() {
  try {
    await dserv.essCommand('ess::reset_settings')
    logToTerminal('Settings reset to defaults', 'success')
  } catch (error) {
    console.error('Failed to reset settings:', error)
    logToTerminal(`Failed to reset settings: ${error.message}`, 'error')
  }
}

async function loadSettings() {
  try {
    await dserv.essCommand('ess::load_settings')
    logToTerminal('Settings loaded', 'success')
  } catch (error) {
    console.error('Failed to load settings:', error)
    logToTerminal(`Failed to load settings: ${error.message}`, 'error')
  }
}

function getStatusColor(status) {
  switch (status) {
    case 'Running': return 'green'
    case 'Stopped': return 'red'
    case 'loading': return 'orange'
    default: return 'default'
  }
}
</script>

<style scoped>
/* Ensure compact spacing throughout */
:deep(.ant-form-item) {
  margin-bottom: 8px;
}

:deep(.ant-form-item-label) {
  font-size: 12px;
  font-weight: 500;
  text-align: right;
  width: 70px; /* Adjust as needed */
  padding-right: 9px;
}

:deep(.ant-select-selector) {
  font-size: 12px;
}

:deep(.ant-btn-sm) {
  font-size: 11px;
  height: 24px;
  padding: 0 8px;
}

.control-buttons {
  display: flex;
  justify-content: center;
}

.control-buttons :deep(.ant-btn) {
  width: 60px;
}

/* Make all selects in system config the same width */
.system-config .ant-select {
  flex: 1;
}

/* Disabled state styling */
.system-config .ant-select-disabled .ant-select-selector {
  opacity: 0.6;
}

.obs-indicator {
  width: 12px;
  height: 12px;
  border-radius: 2px;
  background-color: transparent; /* Invisible by default */
  transition: background-color 0.3s ease;
}

.obs-indicator.is-active {
  background-color: #f5222d; /* Ant Design red-6 */
}
</style>
