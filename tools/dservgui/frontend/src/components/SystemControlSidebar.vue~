<template>
  <div class="system-control-sidebar">

    <!-- Experiment Control Section -->
    <div class="sidebar-section">
      <div class="sidebar-header">Experiment Control</div>
      <div class="section-content">
        <!-- Subject Section -->
        <div class="form-group horizontal">
          <label class="field-label">Subject:</label>
          <div class="input-group"></div>
          <select v-model="subject" class="text-input">
            <option value="human">human</option>
            <option value="momo">momo</option>
            <option value="sally">sally</option>
            <option value="riker">riker</option>
          </select>
        </div>
      </div>

      <div class="section-content">
        <div class="control-buttons">
          <button @click="handleGo" class="control-btn" :class="{ active: isRunning }" :disabled="isRunning">
            <span class="icon">‚ñ∂</span> Go
          </button>
          <button @click="handleStop" class="control-btn" :disabled="!isRunning">
            <span class="icon">‚ñ†</span> Stop
          </button>
          <button @click="handleReset" class="control-btn">
            <span class="icon">‚Ü∫</span> Reset
          </button>
        </div>

        <div class="status-display">
          <div class="status-item">
            <span class="label">Status:</span>
            <span class="value" :class="statusClass">{{ status }}</span>
          </div>
          <div class="status-item">
            <span class="label">Obs:</span>
            <span class="value">{{ obsCount }}</span>
          </div>
        </div>
      </div>
    </div>

    <!-- System Configuration Section -->
    <div class="sidebar-section">
      <div class="section-content">
        <div class="form-group horizontal">
          <label class="field-label">System:</label>
          <div class="input-group">
            <select v-model="essState.currentSystem" @change="onSystemChange" class="text-input"
              :disabled="!backendStateAvailable">
              <option value="">{{ getDropdownPlaceholder('systems') }}</option>
              <option v-for="sys in essState.systems" :key="sys" :value="sys">{{ sys }}</option>
            </select>
            <button @click="refreshSystems" class="icon-btn" title="Refresh">
              <span class="icon">üîÑ</span>
            </button>
          </div>
        </div>

        <div class="form-group horizontal">
          <label class="field-label">Protocol:</label>
          <div class="input-group">
            <select v-model="essState.currentProtocol" @change="onProtocolChange" class="text-input"
              :disabled="!backendStateAvailable">
              <option value="">{{ getDropdownPlaceholder('protocols') }}</option>
              <option v-for="proto in essState.protocols" :key="proto" :value="proto">{{ proto }}</option>
            </select>
            <button @click="refreshProtocols" class="icon-btn" title="Refresh">
              <span class="icon">üîÑ</span>
            </button>
          </div>
        </div>

        <div class="form-group horizontal">
          <label class="field-label">Variant:</label>
          <div class="input-group">
            <select v-model="essState.currentVariant" @change="onVariantChange" class="text-input"
              :class="{ 'variant-active': essState.currentVariant }" :disabled="!backendStateAvailable">
              <option value="">{{ getDropdownPlaceholder('variants') }}</option>
              <option v-for="variant in essState.variants" :key="variant" :value="variant">{{ variant }}</option>
            </select>
            <button @click="refreshVariants" class="icon-btn" title="Refresh">
              <span class="icon">üîÑ</span>
            </button>
          </div>
        </div>

        <div class="button-group">
          <button @click="saveSettings" class="primary-btn">Save Settings</button>
          <button @click="resetSettings" class="secondary-btn">Reset Settings</button>
        </div>
      </div>
    </div>

    <!-- Variant Options Section -->
    <div class="sidebar-section" v-if="variantOptions.length > 0">
      <div class="sidebar-header">Variant Options</div>
      <div class="section-content">
        <div v-for="option in variantOptions" :key="option.name" class="option-item">
          <label>{{ option.name }}:</label>
          <input v-if="option.type === 'number'" type="number" v-model.number="option.value" class="text-input small"
            @change="onVariantOptionChange(option)" />
          <select v-else-if="option.type === 'select'" v-model="option.value" class="text-input small"
            @change="onVariantOptionChange(option)">
            <option v-for="val in option.options" :key="val" :value="val">{{ val }}</option>
          </select>
          <input v-else type="text" v-model="option.value" class="text-input small"
            @change="onVariantOptionChange(option)" />
        </div>
      </div>
    </div>

    <!-- System Settings Section -->
    <div class="sidebar-section" v-if="systemSettings.length > 0">
      <div class="sidebar-header">System Settings</div>
      <div class="section-content settings-list">
        <div v-for="setting in systemSettings" :key="setting.name" class="setting-item">
          <label>{{ setting.name }}:</label>
          <input type="number" v-model.number="setting.value" class="text-input small"
            @change="onSystemSettingChange(setting)" />
        </div>
      </div>
    </div>

    <!-- Connection Status -->
    <div class="sidebar-section connection-section">
      <div class="connection-status">
        <span class="status-indicator" :class="backendStateAvailable ? 'connected' : 'disconnected'">‚óè</span>
        <span>{{ backendStateAvailable ? 'Backend Connected' : 'Backend Disconnected' }}</span>
      </div>
      <button v-if="!backendStateAvailable" @click="reconnectToBackend" class="secondary-btn small">
        Reconnect
      </button>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, watch, onMounted } from 'vue'
import { useEssState } from '../composables/useEssState'

// Get ESS state management
const { 
  essState, 
  backendStateAvailable,
  setEssVariable,
  touchSystemVariables,
  getCurrentState,
  loadInitialState,
  connectToBackendState
} = useEssState()

// Local state
const subject = ref('human')
const isRunning = ref(false)
const status = ref('Stopped')
const obsCount = ref(0)

// Mock variant options - these would come from backend
const variantOptions = ref([
  { name: 'nr', type: 'number', value: 4 },
  { name: 'nplanks', type: 'number', value: 4 },
  { name: 'board_params', type: 'select', value: 'jittered', options: ['jittered', 'fixed', 'random'] }
])

// Mock system settings - these would come from backend
const systemSettings = ref([
  { name: 'interblock_time', value: 1000 },
  { name: 'prestim_time', value: 250 },
  { name: 'response_timeout', value: 25000 },
  { name: 'max_feedback_time', value: 8000 }
])

// Computed
const statusClass = computed(() => {
  if (status.value === 'Running') return 'status-running'
  if (status.value === 'Stopped') return 'status-stopped'
  if (status.value === 'Error') return 'status-error'
  return ''
})

// Methods
const handleGo = () => {
  isRunning.value = true
  status.value = 'Running'
  console.log('Starting experiment...')
}

const handleStop = () => {
  isRunning.value = false
  status.value = 'Stopped'
  console.log('Stopping experiment...')
}

const handleReset = () => {
  isRunning.value = false
  status.value = 'Stopped'
  obsCount.value = 0
  console.log('Resetting experiment...')
}

const getDropdownPlaceholder = (type) => {
  if (!backendStateAvailable.value) {
    return 'Backend unavailable...'
  }
  const items = type === 'systems' ? essState.systems : 
                type === 'protocols' ? essState.protocols : 
                essState.variants
  return items.length ? `Select a ${type.slice(0, -1)}...` : `Loading ${type}...`
}

const onSystemChange = async (event) => {
  const newSystem = event.target.value
  if (!newSystem || !backendStateAvailable.value) return
  
  console.log('üîÑ System selection changed to:', newSystem)
  
  // Immediately update the ESS state for responsive UI
  const previousSystem = essState.currentSystem
  essState.currentSystem = newSystem
  
  try {
    // Send command to backend
    const commandSent = await sendSystemControlCommand('system', newSystem)
    
    if (commandSent) {
      // Update the ESS variable
      const success = await setEssVariable('ess/system', newSystem)
      
      if (!success) {
        console.warn('‚ùå Failed to set ESS system variable to:', newSystem)
        // Revert to previous value on failure
        essState.currentSystem = previousSystem
      } else {
        console.log('‚úÖ Successfully set system to:', newSystem)
        // Load system-specific settings after successful update
        await loadSystemSettings()
      }
    } else {
      // Revert to previous value if command failed
      essState.currentSystem = previousSystem
    }
  } catch (error) {
    console.error('‚ùå Error in system change:', error)
    // Revert to previous value on error
    essState.currentSystem = previousSystem
  }
}

const onProtocolChange = async (event) => {
  const newProtocol = event.target.value
  if (!newProtocol || !backendStateAvailable.value) return
  
  console.log('üîÑ Protocol selection changed to:', newProtocol)
  
  // Immediately update the ESS state for responsive UI
  const previousProtocol = essState.currentProtocol
  essState.currentProtocol = newProtocol
  
  try {
    const commandSent = await sendSystemControlCommand('protocol', newProtocol)
    
    if (commandSent) {
      const success = await setEssVariable('ess/protocol', newProtocol)
      
      if (!success) {
        console.warn('‚ùå Failed to set ESS protocol variable to:', newProtocol)
        // Revert to previous value on failure
        essState.currentProtocol = previousProtocol
      } else {
        console.log('‚úÖ Successfully set protocol to:', newProtocol)
      }
    } else {
      // Revert to previous value if command failed
      essState.currentProtocol = previousProtocol
    }
  } catch (error) {
    console.error('‚ùå Error in protocol change:', error)
    // Revert to previous value on error
    essState.currentProtocol = previousProtocol
  }
}

const onVariantChange = async (event) => {
  const newVariant = event.target.value
  if (!newVariant || !backendStateAvailable.value) return
  
  console.log('üîÑ Variant selection changed to:', newVariant)
  
  // Immediately update the ESS state for responsive UI
  const previousVariant = essState.currentVariant
  essState.currentVariant = newVariant
  
  try {
    const commandSent = await sendSystemControlCommand('variant', newVariant)
    
    if (commandSent) {
      const success = await setEssVariable('ess/variant', newVariant)
      
      if (!success) {
        console.warn('‚ùå Failed to set ESS variant variable to:', newVariant)
        // Revert to previous value on failure
        essState.currentVariant = previousVariant
      } else {
        console.log('‚úÖ Successfully set variant to:', newVariant)
        // Load variant-specific options after successful update
        await loadVariantOptions()
      }
    } else {
      // Revert to previous value if command failed
      essState.currentVariant = previousVariant
    }
  } catch (error) {
    console.error('‚ùå Error in variant change:', error)
    // Revert to previous value on error
    essState.currentVariant = previousVariant
  }
}

const sendSystemControlCommand = async (triggerField, newValue) => {
  if (!backendStateAvailable.value) {
    console.warn('‚ùå Cannot send command - backend state unavailable')
    return false
  }

  const payload = {
    triggerField,
    newValue,
    currentState: {
      system: essState.currentSystem,
      protocol: essState.currentProtocol,
      variant: essState.currentVariant
    },
    timestamp: new Date().toISOString()
  }

  // Update the current state with the new value
  if (triggerField === 'system') {
    payload.currentState.system = newValue
  } else if (triggerField === 'protocol') {
    payload.currentState.protocol = newValue
  } else if (triggerField === 'variant') {
    payload.currentState.variant = newValue
  }

  try {
    console.log('üîÑ Sending system control command:', payload)
    
    const response = await fetch('/api/system-control', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload)
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    const result = await response.json()
    console.log('‚úÖ System control command sent successfully:', result)
    return true
    
  } catch (error) {
    console.error('‚ùå Error sending system control command:', error)
    return false
  }
}

const onVariantOptionChange = async (option) => {
  console.log('üîÑ Variant option changed:', option.name, '=', option.value)
  await setEssVariable(`ess/variant_options/${option.name}`, option.value)
}

const onSystemSettingChange = async (setting) => {
  console.log('üîÑ System setting changed:', setting.name, '=', setting.value)
  await setEssVariable(`ess/system_settings/${setting.name}`, setting.value)
}

const refreshSystems = async () => {
  console.log('üîÑ Refreshing systems...')
  await touchSystemVariables()
}

const refreshProtocols = async () => {
  console.log('üîÑ Refreshing protocols...')
  await touchSystemVariables()
}

const refreshVariants = async () => {
  console.log('üîÑ Refreshing variants...')
  await touchSystemVariables()
}

const saveSettings = async () => {
  console.log('üíæ Saving settings...')
  const settings = {
    subject: subject.value,
    system: essState.currentSystem,
    protocol: essState.currentProtocol,
    variant: essState.currentVariant,
    variantOptions: variantOptions.value,
    systemSettings: systemSettings.value
  }
  
  try {
    const response = await fetch('/api/save-settings', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(settings)
    })
    
    if (response.ok) {
      console.log('‚úÖ Settings saved successfully')
    } else {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
  } catch (error) {
    console.error('‚ùå Error saving settings:', error)
  }
}

const resetSettings = async () => {
  if (!backendStateAvailable.value) return
  
  console.log('üîÑ Resetting all selections...')
  
  try {
    // Reset subject to default
    subject.value = 'human'
    
    // Reset ESS variables
    await Promise.all([
      setEssVariable('ess/system', ''),
      setEssVariable('ess/protocol', ''),
      setEssVariable('ess/variant', '')
    ])
    
    // Reset variant options to defaults
    variantOptions.value.forEach(opt => {
      if (opt.type === 'number') {
        opt.value = 0
      } else if (opt.type === 'select' && opt.options.length > 0) {
        opt.value = opt.options[0]
      } else {
        opt.value = ''
      }
    })
    
    // Reset system settings to defaults
    systemSettings.value.forEach(setting => setting.value = 0)
    
    console.log('‚úÖ Successfully reset all selections')
  } catch (error) {
    console.error('‚ùå Error resetting selections:', error)
  }
}

const loadVariantOptions = async () => {
  console.log('Loading variant options for:', essState.currentVariant)
  // TODO: Fetch from backend based on current variant
}

const loadSystemSettings = async () => {
  console.log('Loading system settings for:', essState.currentSystem)
  // TODO: Fetch from backend based on current system
}

const reconnectToBackend = async () => {
  console.log('üîÑ Attempting to reconnect to backend state...')
  try {
    await loadInitialState()
    connectToBackendState()
    console.log('‚úÖ Successfully reconnected to backend state')
  } catch (error) {
    console.error('‚ùå Failed to reconnect:', error)
  }
}

// Watch for configuration changes
watch(() => essState.configComplete, (complete) => {
  if (complete) {
    console.log('Configuration complete, loading options...')
    loadVariantOptions()
    loadSystemSettings()
  }
})

onMounted(() => {
  console.log('üöÄ SystemControlSidebar mounted with enhanced state management')
  console.log('Current state:', {
    backendStateAvailable: backendStateAvailable.value,
    systems: essState.systems,
    currentSystem: essState.currentSystem,
    protocols: essState.protocols,
    currentProtocol: essState.currentProtocol,
    variants: essState.variants,
    currentVariant: essState.currentVariant,
    configComplete: essState.configComplete
  })
  
  // If no backend state is available, try to connect
  if (!backendStateAvailable.value) {
    console.log('‚ö†Ô∏è Backend state not available, attempting to connect...')
    reconnectToBackend()
  }
})
</script>

<style scoped>
.system-control-sidebar {
  width: 100%;
  height: 100%;
  background: #f8f8f8;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
}

.sidebar-section {
  border-bottom: 1px solid #ddd;
}

.sidebar-section:last-child {
  border-bottom: none;
}

.sidebar-header {
  padding: 6px 8px;
  background: #e8e8e8;
  font-weight: 500;
  font-size: 11px;
  text-transform: uppercase;
  color: #666;
}

.section-content {
  padding: 8px;
}

/* Form Elements */
.form-group {
  margin-bottom: 8px;
}

.form-group.horizontal {
  display: flex;
  align-items: center;
  gap: 8px;
}

.form-group:last-child {
  margin-bottom: 0;
}

.form-group label {
  display: block;
  margin-bottom: 4px;
  font-weight: 500;
  font-size: 12px;
}

.field-label {
  flex-shrink: 0;
  width: 60px;
  text-align: right;
  font-weight: 500;
  font-size: 12px;
  margin-bottom: 0;
}

.input-group {
  display: flex;
  gap: 4px;
  flex: 1;
}

.text-input {
  width: 100%;
  padding: 4px 6px;
  border: 2px inset #f0f0f0;
  font-size: 12px;
}

.text-input.small {
  width: 80px;
}

.text-input:disabled {
  background: #f5f5f5;
  color: #999;
  cursor: not-allowed;
}

.text-input.variant-active {
  background: #e3f2fd;
  border-color: #2196F3;
}

/* Control Buttons */
.control-buttons {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 4px;
  margin-bottom: 12px;
}

.control-btn {
  padding: 6px 8px;
  border: 1px solid #999;
  background: linear-gradient(to bottom, #fff, #e0e0e0);
  font-size: 12px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 4px;
  border-radius: 2px;
}

.control-btn:hover:not(:disabled) {
  background: linear-gradient(to bottom, #fff, #d0d0d0);
}

.control-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.control-btn.active {
  background: linear-gradient(to bottom, #d0d0d0, #b0b0b0);
  border-color: #777;
}

.control-btn .icon {
  font-size: 10px;
}

/* Icon Button */
.icon-btn {
  width: 24px;
  height: 24px;
  border: 1px solid #999;
  background: linear-gradient(to bottom, #fff, #e0e0e0);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 2px;
  flex-shrink: 0;
}

.icon-btn:hover {
  background: linear-gradient(to bottom, #fff, #d0d0d0);
}

.icon-btn .icon {
  font-size: 12px;
}

/* Status Display */
.status-display {
  background: white;
  border: 1px solid #ddd;
  border-radius: 2px;
  padding: 6px;
}

.status-item {
  display: flex;
  justify-content: space-between;
  font-size: 12px;
  margin-bottom: 4px;
}

.status-item:last-child {
  margin-bottom: 0;
}

.status-item .label {
  font-weight: 500;
  color: #666;
}

.status-item .value {
  font-weight: 500;
}

.status-stopped {
  color: #d32f2f;
}

.status-running {
  color: #388e3c;
}

.status-error {
  color: #f57c00;
}

/* Button Groups */
.button-group {
  display: flex;
  gap: 4px;
  margin-top: 8px;
}

.primary-btn, .secondary-btn {
  flex: 1;
  padding: 4px 8px;
  font-size: 12px;
  border: 1px solid #999;
  cursor: pointer;
  border-radius: 2px;
}

.primary-btn {
  background: linear-gradient(to bottom, #4CAF50, #45a049);
  color: white;
}

.secondary-btn {
  background: linear-gradient(to bottom, #fff, #e0e0e0);
}

.primary-btn:hover:not(:disabled) {
  background: linear-gradient(to bottom, #45a049, #3e8e41);
}

.secondary-btn:hover {
  background: linear-gradient(to bottom, #fff, #d0d0d0);
}

.secondary-btn.small {
  padding: 2px 6px;
  font-size: 11px;
}

/* Options and Settings */
.option-item, .setting-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 6px;
  gap: 8px;
}

.option-item:last-child, .setting-item:last-child {
  margin-bottom: 0;
}

.option-item label, .setting-item label {
  font-size: 11px;
  color: #333;
  flex: 1;
}

.settings-list {
  max-height: 180px;
  overflow-y: auto;
}

/* Connection Section */
.connection-section {
  margin-top: auto;
  background: #e0e0e0;
}

.connection-status {
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 11px;
  margin-bottom: 6px;
}

.status-indicator {
  font-size: 10px;
}

.status-indicator.connected {
  color: #4caf50;
}

.status-indicator.disconnected {
  color: #f44336;
}

/* Scrollbar */
::-webkit-scrollbar {
  width: 12px;
}

::-webkit-scrollbar-track {
  background: #f0f0f0;
  border: 1px inset #f0f0f0;
}

::-webkit-scrollbar-thumb {
  background: linear-gradient(to bottom, #e0e0e0, #c0c0c0);
  border: 1px outset #d0d0d0;
}

::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(to bottom, #d0d0d0, #b0b0b0);
}
</style>