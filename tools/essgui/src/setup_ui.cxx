// generated by Fast Light User Interface Designer (fluid) version 1.0400

#include "setup_ui.h"

Fl_Double_Window *main_window=(Fl_Double_Window *)0;

Fl_Output *sysname_widget=(Fl_Output *)0;

Fl_Output *sysos_widget=(Fl_Output *)0;

Fl_Tree *host_widget=(Fl_Tree *)0;

Fl_Choice *subject_widget=(Fl_Choice *)0;

static void cb_subject_widget(Fl_Choice*, void*) {
  set_subject();
}

Fl_Choice *system_widget=(Fl_Choice *)0;

static void cb_system_widget(Fl_Choice*, void*) {
  set_system();
}

Fl_Choice *protocol_widget=(Fl_Choice *)0;

static void cb_protocol_widget(Fl_Choice*, void*) {
  set_protocol();
}

Fl_Choice *variant_widget=(Fl_Choice *)0;

static void cb_variant_widget(Fl_Choice*, void*) {
  set_variant();
}

static void cb_Go(Fl_Button*, void*) {
  esscmd("ess::start");
}

static void cb_Stop(Fl_Button*, void*) {
  esscmd("ess::stop");
}

static void cb_Reset(Fl_Button*, void*) {
  esscmd("ess::reset");
}

Fl_Output *system_status_widget=(Fl_Output *)0;

Fl_Output *obscount_widget=(Fl_Output *)0;

Fl_Output *stimid_widget=(Fl_Output *)0;

EyeTouchWin *eyetouch_widget=(EyeTouchWin *)0;

Fl_Terminal *behavior_terminal=(Fl_Terminal *)0;

Fl_Choice *sortby_1=(Fl_Choice *)0;

Fl_Choice *sortby_2=(Fl_Choice *)0;

Fl_Output *pctcomplete_widget=(Fl_Output *)0;

Fl_Output *pctcorrect_widget=(Fl_Output *)0;

Fl_Output *reward_widget=(Fl_Output *)0;

CGWin *cgwin_widget=(CGWin *)0;

VirtualEye *virtual_eye_widget=(VirtualEye *)0;

DGTable *stimdg_widget=(DGTable *)0;

Fl_Console *output_term=(Fl_Console *)0;

Fl_Output *status_widget=(Fl_Output *)0;

Fl_Double_Window * setup_ui(int argc, char *argv[]) {
  { main_window = new Fl_Double_Window(1280, 800, "EssGUI");
    { Fl_Group* o = new Fl_Group(0, 1, 1280, 762);
      { Fl_Group* o = new Fl_Group(0, 28, 188, 640, "Systems");
        o->labelsize(18);
        o->vertical_label_margin(4);
        { Fl_Flex* o = new Fl_Flex(5, 38, 178, 33);
          o->type(1);
          { Fl_Button* o = new Fl_Button(5, 38, 178, 33, "Refresh");
            o->labelsize(16);
            o->callback((Fl_Callback*)refresh_cb);
          } // Fl_Button* o
          o->fixed(o->child(0), 178);
          o->end();
        } // Fl_Flex* o
        { Fl_Group* o = new Fl_Group(0, 361, 188, 247);
          { Fl_Flex* o = new Fl_Flex(68, 379, 120, 56);
            { sysname_widget = new Fl_Output(68, 379, 120, 30, "Name:");
              sysname_widget->box(FL_NO_BOX);
              sysname_widget->labelsize(16);
              sysname_widget->textsize(16);
            } // Fl_Output* sysname_widget
            { sysos_widget = new Fl_Output(68, 409, 120, 26, "OS:");
              sysos_widget->box(FL_NO_BOX);
              sysos_widget->labelsize(16);
              sysos_widget->textsize(16);
            } // Fl_Output* sysos_widget
            o->fixed(o->child(0), 30);
            o->end();
          } // Fl_Flex* o
          o->end();
        } // Fl_Group* o
        { host_widget = new Fl_Tree(0, 73, 188, 280);
          host_widget->callback((Fl_Callback*)host_cb);
        } // Fl_Tree* host_widget
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(190, 28, 338, 645, "Control");
        o->box(FL_GTK_DOWN_BOX);
        o->color(FL_DARK1);
        o->labelsize(18);
        o->vertical_label_margin(4);
        { Fl_Group* o = new Fl_Group(191, 29, 330, 352);
          { Fl_Group* o = new Fl_Group(199, 31, 322, 51);
            o->box(FL_THIN_UP_BOX);
            { Fl_Flex* o = new Fl_Flex(282, 43, 210, 30);
              { subject_widget = new Fl_Choice(282, 43, 210, 30, "Subject:");
                subject_widget->down_box(FL_BORDER_BOX);
                subject_widget->labelsize(16);
                subject_widget->textsize(16);
                subject_widget->callback((Fl_Callback*)cb_subject_widget);
              } // Fl_Choice* subject_widget
              o->end();
            } // Fl_Flex* o
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(199, 86, 322, 150);
            o->box(FL_THIN_UP_BOX);
            o->labelsize(20);
            { Fl_Flex* o = new Fl_Flex(282, 107, 210, 102);
              { system_widget = new Fl_Choice(282, 107, 210, 28, "System:");
                system_widget->down_box(FL_BORDER_BOX);
                system_widget->labelsize(16);
                system_widget->textsize(16);
                system_widget->callback((Fl_Callback*)cb_system_widget);
                system_widget->when(FL_WHEN_RELEASE_ALWAYS);
              } // Fl_Choice* system_widget
              { protocol_widget = new Fl_Choice(282, 145, 210, 27, "Protocol:");
                protocol_widget->down_box(FL_BORDER_BOX);
                protocol_widget->labelsize(16);
                protocol_widget->textsize(16);
                protocol_widget->callback((Fl_Callback*)cb_protocol_widget);
                protocol_widget->when(FL_WHEN_RELEASE_ALWAYS);
              } // Fl_Choice* protocol_widget
              { variant_widget = new Fl_Choice(282, 182, 210, 27, "Variant:");
                variant_widget->down_box(FL_BORDER_BOX);
                variant_widget->labelsize(16);
                variant_widget->textsize(16);
                variant_widget->callback((Fl_Callback*)cb_variant_widget);
                variant_widget->when(FL_WHEN_RELEASE_ALWAYS);
              } // Fl_Choice* variant_widget
              o->gap(10);
              o->end();
            } // Fl_Flex* o
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(199, 239, 322, 136);
            o->box(FL_THIN_UP_BOX);
            { Fl_Flex* o = new Fl_Flex(231, 250, 250, 29);
              o->type(1);
              { Fl_Button* o = new Fl_Button(231, 250, 84, 29, "Go");
                o->labelsize(18);
                o->callback((Fl_Callback*)cb_Go);
              } // Fl_Button* o
              { Fl_Button* o = new Fl_Button(315, 250, 83, 29, "Stop");
                o->labelsize(18);
                o->callback((Fl_Callback*)cb_Stop);
              } // Fl_Button* o
              { Fl_Button* o = new Fl_Button(398, 250, 83, 29, "Reset");
                o->labelsize(18);
                o->callback((Fl_Callback*)cb_Reset);
              } // Fl_Button* o
              o->end();
            } // Fl_Flex* o
            { Fl_Flex* o = new Fl_Flex(320, 287, 190, 83);
              { system_status_widget = new Fl_Output(320, 287, 190, 28, "Status:");
                system_status_widget->box(FL_NO_BOX);
                system_status_widget->labelsize(16);
                system_status_widget->textsize(16);
              } // Fl_Output* system_status_widget
              { obscount_widget = new Fl_Output(320, 315, 190, 28, "Obs:");
                obscount_widget->box(FL_FLAT_BOX);
                obscount_widget->color(FL_BACKGROUND_COLOR);
                obscount_widget->labelsize(16);
                obscount_widget->textsize(16);
              } // Fl_Output* obscount_widget
              { stimid_widget = new Fl_Output(320, 343, 190, 27, "Stimulus ID:");
                stimid_widget->box(FL_NO_BOX);
                stimid_widget->labelsize(16);
                stimid_widget->textsize(16);
                stimid_widget->readonly(1); stimid_widget->set_output();
              } // Fl_Output* stimid_widget
              o->end();
            } // Fl_Flex* o
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Group* o
        { Fl_Scroll* o = new Fl_Scroll(200, 381, 321, 280);
          o->type(7);
          o->end();
          Fl_Group::current()->resizable(o);
        } // Fl_Scroll* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(531, 28, 748, 645, "Info");
        o->labelsize(18);
        o->vertical_label_margin(4);
        { Fl_Tabs* o = new Fl_Tabs(535, 32, 744, 641);
          { Fl_Group* o = new Fl_Group(536, 56, 730, 615, "behavior");
            o->labelsize(16);
            { Fl_Group* o = new Fl_Group(546, 84, 245, 312, "Behavior Monitor");
              o->box(FL_DOWN_BOX);
              { eyetouch_widget = new EyeTouchWin(553, 91, 232, 232, "EyeWindow");
                eyetouch_widget->box(FL_DOWN_FRAME);
                eyetouch_widget->color(FL_BACKGROUND_COLOR);
                eyetouch_widget->selection_color(FL_BACKGROUND_COLOR);
                eyetouch_widget->labeltype(FL_NORMAL_LABEL);
                eyetouch_widget->labelfont(0);
                eyetouch_widget->labelsize(14);
                eyetouch_widget->labelcolor(FL_FOREGROUND_COLOR);
                eyetouch_widget->align(Fl_Align(FL_ALIGN_CENTER));
                eyetouch_widget->when(FL_WHEN_RELEASE);
              } // EyeTouchWin* eyetouch_widget
              { Fl_Group* o = new Fl_Group(546, 325, 245, 71, "window status");
                o->box(FL_THIN_DOWN_FRAME);
                o->labeltype(FL_NO_LABEL);
                o->end();
              } // Fl_Group* o
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(791, 420, 451, 248, "Performance");
              o->box(FL_UP_BOX);
              o->vertical_label_margin(3);
              { behavior_terminal = new Fl_Terminal(798, 430, 430, 156);
                behavior_terminal->cursorbgcolor(FL_BLACK);
              } // Fl_Terminal* behavior_terminal
              { Fl_Flex* o = new Fl_Flex(1064, 598, 166, 60);
                { sortby_1 = new Fl_Choice(1064, 598, 166, 25, "Sort by:");
                  sortby_1->down_box(FL_BORDER_BOX);
                  sortby_1->callback((Fl_Callback*)sortby_cb);
                } // Fl_Choice* sortby_1
                { sortby_2 = new Fl_Choice(1064, 633, 166, 25, "Sort by:");
                  sortby_2->down_box(FL_BORDER_BOX);
                  sortby_2->callback((Fl_Callback*)sortby_cb);
                } // Fl_Choice* sortby_2
                o->gap(10);
                o->end();
              } // Fl_Flex* o
              { Fl_Group* o = new Fl_Group(884, 588, 89, 80);
                { Fl_Flex* o = new Fl_Flex(884, 597, 89, 64);
                  { pctcomplete_widget = new Fl_Output(899, 597, 74, 17, "% Completed:");
                    pctcomplete_widget->box(FL_NO_BOX);
                  } // Fl_Output* pctcomplete_widget
                  { pctcorrect_widget = new Fl_Output(899, 614, 74, 30, "% Correct:");
                    pctcorrect_widget->box(FL_NO_BOX);
                  } // Fl_Output* pctcorrect_widget
                  { reward_widget = new Fl_Output(899, 644, 74, 17, "Reward:");
                    reward_widget->box(FL_NO_BOX);
                  } // Fl_Output* reward_widget
                  o->margin(15, 0, 0, 0);
                  o->fixed(o->child(1), 30);
                  o->end();
                } // Fl_Flex* o
                o->end();
              } // Fl_Group* o
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(795, 84, 456, 316, "Plot Window");
              { cgwin_widget = new CGWin(795, 87, 440, 311, "label");
                cgwin_widget->box(FL_NO_BOX);
                cgwin_widget->color(FL_BACKGROUND_COLOR);
                cgwin_widget->selection_color(FL_BACKGROUND_COLOR);
                cgwin_widget->labeltype(FL_NORMAL_LABEL);
                cgwin_widget->labelfont(0);
                cgwin_widget->labelsize(14);
                cgwin_widget->labelcolor(FL_FOREGROUND_COLOR);
                cgwin_widget->align(Fl_Align(FL_ALIGN_CENTER));
                cgwin_widget->when(FL_WHEN_RELEASE);
              } // CGWin* cgwin_widget
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(546, 415, 245, 248, "Virtual Input");
              o->color(FL_BLACK);
              { Fl_Group* o = new Fl_Group(564, 421, 208, 204, "Eye Window");
                o->box(FL_FLAT_BOX);
                o->color(FL_INACTIVE_COLOR);
                o->labeltype(FL_NO_LABEL);
                { virtual_eye_widget = new VirtualEye(652, 511, 15, 15, "label");
                  virtual_eye_widget->box(FL_NO_BOX);
                  virtual_eye_widget->color(FL_BACKGROUND_COLOR);
                  virtual_eye_widget->selection_color(FL_BACKGROUND_COLOR);
                  virtual_eye_widget->labeltype(FL_NORMAL_LABEL);
                  virtual_eye_widget->labelfont(0);
                  virtual_eye_widget->labelsize(14);
                  virtual_eye_widget->labelcolor(FL_FOREGROUND_COLOR);
                  virtual_eye_widget->callback((Fl_Callback*)virtual_eye_cb);
                  virtual_eye_widget->align(Fl_Align(FL_ALIGN_CENTER));
                  virtual_eye_widget->when(FL_WHEN_CHANGED | FL_WHEN_RELEASE_ALWAYS);
                } // VirtualEye* virtual_eye_widget
                o->end();
              } // Fl_Group* o
              o->end();
            } // Fl_Group* o
            o->end();
          } // Fl_Group* o
          { stimdg_widget = new DGTable(537, 56, 729, 608, "stimdg");
            stimdg_widget->box(FL_THIN_DOWN_FRAME);
            stimdg_widget->color(FL_BACKGROUND_COLOR);
            stimdg_widget->selection_color(FL_BACKGROUND_COLOR);
            stimdg_widget->labeltype(FL_NORMAL_LABEL);
            stimdg_widget->labelfont(0);
            stimdg_widget->labelsize(16);
            stimdg_widget->labelcolor(FL_FOREGROUND_COLOR);
            stimdg_widget->align(Fl_Align(FL_ALIGN_TOP));
            stimdg_widget->when(FL_WHEN_RELEASE);
            stimdg_widget->hide();
            stimdg_widget->end();
          } // DGTable* stimdg_widget
          { Fl_Group* o = new Fl_Group(535, 56, 710, 612, "stim");
            o->labelsize(16);
            o->hide();
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Tabs* o
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 674, 1279, 88);
        { output_term = new Fl_Console(0, 674, 1279, 88);
          output_term->box(FL_DOWN_FRAME);
          output_term->color(FL_BLACK);
          output_term->selection_color(FL_BACKGROUND_COLOR);
          output_term->labeltype(FL_NORMAL_LABEL);
          output_term->labelfont(0);
          output_term->labelsize(14);
          output_term->labelcolor(FL_FOREGROUND_COLOR);
          output_term->align(Fl_Align(FL_ALIGN_TOP));
          output_term->when(FL_WHEN_RELEASE);
        } // Fl_Console* output_term
        o->end();
      } // Fl_Group* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(0, 768, 1280, 31);
      o->labeltype(FL_NO_LABEL);
      { status_widget = new Fl_Output(0, 769, 1280, 30);
        status_widget->labeltype(FL_NO_LABEL);
        Fl_Group::current()->resizable(status_widget);
      } // Fl_Output* status_widget
      o->end();
    } // Fl_Group* o
    main_window->end();
  } // Fl_Double_Window* main_window
  output_term->init_linenoise();
  output_term->set_callback(eval, NULL);


  return main_window;
}
