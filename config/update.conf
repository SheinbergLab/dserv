namespace eval update {
    variable repo_url "https://api.github.com/repos/SheinbergLab/dserv"
    
    proc detect_platform_and_arch {} {
        global tcl_platform
        
        set os $tcl_platform(os)
        set machine $tcl_platform(machine)
        
        # Map Tcl platform names to your naming convention
        switch -glob $machine {
            "aarch64" - "arm64" { set arch "arm64" }
            "x86_64" - "amd64" { set arch "amd64" }
            "armv7*" { set arch "armhf" }
            default { set arch $machine }
        }
        
        switch $os {
            "Linux" { 
                # Check if we're on a system that uses .deb packages
                if {[file exists "/etc/debian_version"] || 
                    [file exists "/usr/bin/dpkg"]} {
                    set format "deb"
                } else {
                    set format "binary"
                }
                set platform "linux"
            }
            "Darwin" { 
                set platform "macos"
                set format "pkg"
            }
            default { 
                set platform [string tolower $os]
                set format "binary"
            }
        }
        
        return [list $platform $arch $format]
    }
    
    proc get_latest_version {} {
        variable repo_url
        set api_url "${repo_url}/releases/latest"
        
        if {[catch {exec curl -s $api_url} json_data]} {
            error "Failed to fetch latest release: $json_data"
        }
        
        # Parse JSON to get tag_name
        set release_data [parseJson $json_data]
        return [dict get $release_data tag_name]
    }
    
    proc construct_download_url {version platform arch format} {
        variable repo_url
        set base_url "${repo_url}/releases/download/${version}"
        
        switch $format {
            "deb" {
                return "${base_url}/dserv_${version}_${arch}.deb"
            }
            "pkg" {
                return "${base_url}/dserv_${version}_${arch}.pkg"
            }
            "binary" {
                return "${base_url}/dserv-${platform}-${arch}"
            }
            default {
                error "Unsupported format: $format"
            }
        }
    }
    
    proc download_latest_release {} {
        try {
            # Detect current platform
            lassign [detect_platform_and_arch] platform arch format
            puts "Detected platform: $platform, arch: $arch, format: $format"
            
            # Get latest version
            set version [get_latest_version]
            puts "Latest version: $version"
            
            # Construct download URL
            set download_url [construct_download_url $version $platform $arch $format]
            puts "Download URL: $download_url"
            
            # Set download filename
            switch $format {
                "deb" { set filename "dserv_${version}_${arch}.deb" }
                "pkg" { set filename "dserv_${version}_${arch}.pkg" }
                "binary" { set filename "dserv-${platform}-${arch}" }
            }
            
            # Download with verification
            if {[catch {exec wget -q --show-progress $download_url -O $filename} result]} {
                error "Download failed: $result"
            }
            
            # Verify download worked
            if {![file exists $filename]} {
                error "Downloaded file not found: $filename"
            }
            
            set size [file size $filename]
            if {$size < 1000} {
                # Probably an error page, check content
                set content [exec head -1 $filename]
                if {[string match "*404*" $content] || [string match "*Not Found*" $content]} {
                    file delete $filename
                    error "File not found on server (404 error)"
                }
            }
            
            puts "Successfully downloaded: $filename ($size bytes)"
            return $filename
            
        } on error {msg} {
            puts "Error downloading release: $msg"
            return ""
        }
    }
    
    proc install_update {filename} {
        lassign [detect_platform_and_arch] platform arch format
        
        switch $format {
            "deb" {
                # Install .deb package
                if {[catch {exec sudo dpkg -i $filename} result]} {
                    puts "dpkg install failed, trying to fix dependencies..."
                    catch {exec sudo apt-get install -f}
                    if {[catch {exec sudo dpkg -i $filename} result2]} {
                        error "Failed to install .deb package: $result2"
                    }
                }
                puts "Successfully installed .deb package"
                return 1
            }
            "pkg" {
                # Install .pkg package  
                if {[catch {exec sudo installer -pkg $filename -target /} result]} {
                    error "Failed to install .pkg package: $result"
                }
                puts "Successfully installed .pkg package"
                return 1
            }
            "binary" {
                # Replace binary
                set current_exe [info nameofexecutable]
                set backup_exe "${current_exe}.backup"
                
                # Create backup
                file copy $current_exe $backup_exe
                
                # Replace with new binary
                file copy -force $filename $current_exe
                file attributes $current_exe -permissions 0755
                
                puts "Successfully replaced binary"
                return 1
            }
        }
        return 0
    }
    
    proc perform_full_update {} {
        set filename [download_latest_release]
        if {$filename eq ""} {
            return 0
        }
        
        if {[install_update $filename]} {
            # Cleanup
            file delete $filename
            
            # For package installs, we don't need to restart manually
            lassign [detect_platform_and_arch] platform arch format
            if {$format eq "binary"} {
                puts "Update complete. Restarting..."
                updateRestart
            } else {
                puts "Update complete. Package manager handled the installation."
                dservSet system/update_status "complete"
            }
            return 1
        }
        return 0
    }
}