name: Package and Release

on:
  push:
    tags:        
      - '*'

jobs:

  release-dserv:

    strategy:
      matrix:
        # Build on not-the-latest to keep dependency versions modest.
        os: [ubuntu-22.04, ubuntu-22.04-arm]

    runs-on: ${{ matrix.os }}

    permissions:
      contents: write
      
    steps:

      - name: Set up a build environment.
        run: |
          sudo apt update
          sudo apt install -y git wget ca-certificates build-essential cmake zip unzip
          sudo apt install -y libevdev-dev zlib1g-dev

      - name: Check out our dserv code for the current tag.
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install TCL 9 to the build environment.
        run: |
          cd deps/tcl/unix/
          ./configure
          make
          sudo make install

      - name: Install Jansson to the build environment.
        run: |
          cd deps/jansson/
          cmake -B build
          cmake --build build
          sudo cmake --install build

      - name: Build dserv itself and package it for release.
        run: |
          cmake -D PROJECT_VERSION=${{ github.ref_name }} -B build
          cmake --build build
          cpack -G DEB --config build/CPackConfig.cmake

      - name: Create a GitHub release for the current tag and package.
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./*.deb"
          body: dserv version ${{ github.ref_name }}
          generateReleaseNotes: true
          allowUpdates: true

  release-essgui:

    strategy:
      matrix:
        # Build on not-the-latest to keep dependency versions modest.
        os: [ubuntu-22.04, ubuntu-22.04-arm]

    runs-on: ${{ matrix.os }}

    steps:

      - name: Set up a build environment.
        run: |
          sudo apt update
          sudo apt install -y git wget ca-certificates build-essential cmake zip unzip
          sudo apt install -y libpango1.0-dev libwayland-dev wayland-protocols libxkbcommon-dev libxinerama-dev libdbus-1-dev libglew-dev  libdecor-0-dev libgtk-3-dev liblz4-dev

      - name: Check out our dserv code for the current tag.
        uses: actions/checkout@v4
        with:
            submodules: true

      - name: Install TCL 9 to the build environment.
        run: |
          cd deps/tcl/unix/
          ./configure
          make
          sudo make install

      - name: Install Jansson to the build environment.
        run: |
          cd deps/jansson/
          cmake -B build
          cmake --build build
          sudo cmake --install build

      - name: Install FLTK GUI framework into the build environment.
        run: |
          cd deps/fltk/
          cmake -B build
          cmake --build build
          sudo cmake --install build

      - name: Install libharu PDF library into the build environment.
        run: |
          cd deps/libharu/
          cmake -DBUILD_SHARED_LIBS=OFF -B build
          cmake --build build
          sudo cmake --install build

      # TODO: obtain dlsh from SheinbergLab, not benjamin-heasly
      - name: Install our dlsh libs and headers into the build environment.
        run: |
          DLSH_VERSION=0.0.16
          wget https://github.com/benjamin-heasly/dlsh/releases/download/${DLSH_VERSION}/dlsh_${DLSH_VERSION}_$(dpkg --print-architecture).deb
          sudo dpkg --install dlsh_${DLSH_VERSION}_$(dpkg --print-architecture).deb

      - name: Install essgui itself and package for release.
        run: |
          cd tools/essgui
          cmake -D PROJECT_VERSION=${{ github.ref_name }} -B build
          cmake --build build
          cpack -G DEB --config build/CPackConfig.cmake

      - name: Create a GitHub release for the current tag and package.
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./tools/essgui/*.deb"
          body: dserv version ${{ github.ref_name }}
          generateReleaseNotes: true
          allowUpdates: true

  check-dserv:

    needs: release-dserv

    strategy:
      matrix:
        # Check on latest to confirm compatibility.
        os: [ubuntu-24.04, ubuntu-24.04-arm]

    runs-on: ${{ matrix.os }}

    steps:
        
      - name: Install the dserv package we just released.
        run: |
          wget ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/dserv_${{ github.ref_name }}_$(dpkg --print-architecture).deb
          sudo apt install --yes ./dserv_${{ github.ref_name }}_$(dpkg --print-architecture).deb

      - name: Install dlsh libs and dependencies.
        run: |
          wget https://github.com/benjamin-heasly/dlsh/releases/download/initial/dlsh.zip
          sudo mkdir -p /usr/local/dlsh
          sudo cp dlsh.zip /usr/local/dlsh

      - name: Sanity check the installed dserv.
        run: |
          ls -alth /usr/local/bin
          ls -alth /usr/local/dserv/db
          echo "test-123" | essctrl && cat history.txt
          /usr/local/dserv/dserv --help
          timeout --preserve-status --signal SIGINT 2 /usr/local/dserv/dserv -c /usr/local/dserv/config/dsconf.tcl -t /usr/local/dserv/config/triggers.tcl

  check-essgui:

    needs: release-essgui

    strategy:
      matrix:
        # Check on latest to confirm compatibility.
        os: [ubuntu-24.04, ubuntu-24.04-arm]

    runs-on: ${{ matrix.os }}

    steps:

      - name: Install the essgui package we just released.
        run: |
          wget ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/essgui_${{ github.ref_name }}_$(dpkg --print-architecture).deb
          sudo apt install --yes ./essgui_${{ github.ref_name }}_$(dpkg --print-architecture).deb

      - name: Install dlsh libs and dependencies.
        run: |
          wget https://github.com/benjamin-heasly/dlsh/releases/download/initial/dlsh.zip
          sudo mkdir -p /usr/local/dlsh
          sudo cp dlsh.zip /usr/local/dlsh

      - name: Sanity check the installed essgui.
        run: |
          ls -alth /usr/local/bin
          ls -alth /usr/local/lib
          essgui || echo "OK"
