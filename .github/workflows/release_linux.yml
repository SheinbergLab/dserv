name: Release for Linux

on:
  push:
    tags:
      - '*'

jobs:

  release-dserv:

    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm]

    runs-on: ${{ matrix.os }}

    permissions:
      contents: write
      
    steps:

      - name: Check out our dserv code for the current tag.
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up a build environment.
        run: |
          sudo apt update
          sudo apt install -y git wget ca-certificates build-essential cmake zip unzip
          sudo apt install -y libevdev-dev zlib1g-dev pkg-config

      - name: Install TCL 9 to the build environment.
        run: |
          cd deps/tcl/unix/
          ./configure
          make
          sudo make install

      - name: Install Jansson to the build environment.
        run: |
          cd deps/jansson/
          cmake -B build
          cmake --build build
          sudo cmake --install build

      - name: Download dlsh for release inclusion
        run: |
          wget https://github.com/SheinbergLab/dlsh/releases/download/0.9.7/dlsh.zip -O dlsh.zip

      - name: Build dserv itself and package it for release.
        run: |
          cmake -D PROJECT_VERSION=${{ github.ref_name }} -B build
          cmake --build build --verbose
          cpack -G DEB --config build/CPackConfig.cmake

      - name: Create a GitHub release for the current tag and package.
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./*.deb,dlsh.zip"
          body: dserv version ${{ github.ref_name }}
          generateReleaseNotes: true
          allowUpdates: true

  release-camera:

    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            target: linux
            libcamera_version: "0.4.0"
          - os: ubuntu-22.04-arm  
            target: rpi
            libcamera_version: "0.5.1"

    runs-on: ${{ matrix.os }}

    permissions:
      contents: write

    steps:

      - name: Check out our dserv code for the current tag.
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up a build environment.
        run: |
          sudo apt update
          sudo apt install -y git wget ca-certificates build-essential cmake zip unzip
          sudo apt install -y libevdev-dev zlib1g-dev pkg-config libjpeg-dev
          
          # Check what JPEG libraries are available for packaging
          echo "Available JPEG packages:"
          apt list --installed | grep jpeg || echo "No JPEG packages found"
          apt-cache search libjpeg | grep -E "libjpeg[0-9]+" || echo "No libjpeg runtime packages found"

      - name: Set architecture-specific paths
        run: |
          if [ "$(dpkg --print-architecture)" = "arm64" ]; then
            echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib/aarch64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          else
            echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          fi

      - name: Install platform-specific libcamera
        run: |
          if [ "${{ matrix.target }}" = "rpi" ]; then
            # Build from source for RPi compatibility
            sudo apt install -y ninja-build python3-pip python3-yaml python3-ply python3-jinja2
            sudo pip3 install meson
            git clone https://git.libcamera.org/libcamera/libcamera.git
            cd libcamera
            git checkout v${{ matrix.libcamera_version }}
            meson setup build --prefix=/usr/local -Dpipelines=rpi/vc4,vimc -Dipas=rpi/vc4 -Dtest=false -Ddocumentation=disabled
            ninja -C build
            sudo ninja -C build install
            sudo ldconfig
          else
            # Use system packages for generic Linux (if available)
            # For now, also build from source for consistency
            sudo apt install -y ninja-build python3-pip python3-yaml python3-ply python3-jinja2
            sudo pip3 install meson
            git clone https://git.libcamera.org/libcamera/libcamera.git
            cd libcamera
            git checkout v${{ matrix.libcamera_version }}
            meson setup build --prefix=/usr/local -Dpipelines=rpi/vc4,vimc -Dipas=rpi/vc4 -Dtest=false -Ddocumentation=disabled
            ninja -C build
            sudo ninja -C build install
            sudo ldconfig
          fi

      - name: Install TCL 9 (needed for camera module)
        run: |
          cd deps/tcl/unix/
          ./configure
          make
          sudo make install

      - name: Install Jansson (needed for camera module)
        run: |
          cd deps/jansson/
          cmake -B build
          cmake --build build
          sudo cmake --install build

      - name: Build camera module only
        run: |
          cd modules
          cmake -DBUILD_CAMERA=ON -DCMAKE_BUILD_TYPE=Release -B build
          cmake --build build --target camera_capture

      - name: Package camera module
        run: |
          mkdir -p camera-pkg/usr/local/dserv/modules
          cp modules/build/dserv_camera.so camera-pkg/usr/local/dserv/modules/
          
          # Create package metadata
          mkdir -p camera-pkg/DEBIAN
          LIBCAMERA_DEP="libcamera0.5 (>= 0.5.0)"
          if [ "${{ matrix.target }}" = "linux" ]; then
            LIBCAMERA_DEP="libcamera0.4 (>= 0.4.0)"
          fi
          
          cat > camera-pkg/DEBIAN/control << EOF
          Package: dserv-camera-${{ matrix.target }}
          Version: ${{ github.ref_name }}
          Architecture: $(dpkg --print-architecture)
          Depends: dserv (>= ${{ github.ref_name }}), ${LIBCAMERA_DEP}, libjpeg8
          Description: Camera module for dserv
          Maintainer: SheinbergLab
          EOF
          
          dpkg-deb --build camera-pkg dserv-camera-${{ matrix.target }}_${{ github.ref_name }}_$(dpkg --print-architecture).deb

      - name: Upload camera package
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dserv-camera-*.deb"
          body: dserv version ${{ github.ref_name }}
          generateReleaseNotes: true
          allowUpdates: true

  release-essgui:

    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm]

    runs-on: ${{ matrix.os }}

    steps:

      - name: Check out our dserv code for the current tag.
        uses: actions/checkout@v4
        with:
            submodules: true

      - name: Set up a build environment.
        run: |
          sudo apt update
          sudo apt install -y git wget ca-certificates build-essential cmake zip unzip
          sudo apt install -y libpango1.0-dev libwayland-dev wayland-protocols libxkbcommon-dev libxinerama-dev libdbus-1-dev libglew-dev  libdecor-0-dev libgtk-3-dev liblz4-dev

      - name: Install TCL 9 to the build environment.
        run: |
          cd deps/tcl/unix/
          ./configure
          make
          sudo make install

      - name: Install Jansson to the build environment.
        run: |
          cd deps/jansson/
          cmake -B build
          cmake --build build
          sudo cmake --install build

      - name: Install FLTK GUI framework into the build environment.
        run: |
          cd deps/fltk/
          cmake -B build
          cmake --build build
          sudo cmake --install build

      - name: Install libharu PDF library into the build environment.
        run: |
          cd deps/libharu/
          cmake -DBUILD_SHARED_LIBS=OFF -B build
          cmake --build build
          sudo cmake --install build

      - name: Install our dlsh libs and headers into the build environment.
        run: |
          wget https://github.com/SheinbergLab/dlsh/releases/download/0.9.7/dlsh.zip -O dlsh.zip
          sudo unzip -o dlsh.zip -d /usr/local/
          sudo chmod +x /usr/local/bin/dlsh*

      - name: Install essgui itself and package for release.
        run: |
          cd tools/essgui
          cmake -D PROJECT_VERSION=${{ github.ref_name }} -B build
          cmake --build build
          cpack -G DEB --config build/CPackConfig.cmake

      - name: Create a GitHub release for the current tag and package.
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./tools/essgui/*.deb"
          body: dserv version ${{ github.ref_name }}
          generateReleaseNotes: true
          allowUpdates: true

  check-dserv:

    needs: release-dserv

    strategy:
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm]

    runs-on: ${{ matrix.os }}

    steps:

      - name: Install the dserv package we just released.
        run: |
          wget ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/dserv_${{ github.ref_name }}_$(dpkg --print-architecture).deb
          sudo apt install --yes ./dserv_${{ github.ref_name }}_$(dpkg --print-architecture).deb

      - name: Install dlsh packages.
        run: |
          wget https://github.com/SheinbergLab/dlsh/releases/download/0.9.7/dlsh.zip -O dlsh.zip
          sudo mkdir -p /usr/local/dlsh
          sudo cp dlsh.zip /usr/local/dlsh

      - name: Sanity check the installed dserv.
        run: |
          ls -alth /usr/local/bin
          ls -alth /usr/local/dserv/db
          echo "return 100" | essctrl
          /usr/local/dserv/dserv --help
          timeout --preserve-status --signal SIGINT 2 /usr/local/dserv/dserv -c /usr/local/dserv/config/dsconf.tcl -t /usr/local/dserv/config/triggers.tcl

  check-essgui:

    needs: release-essgui

    strategy:
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm]

    runs-on: ${{ matrix.os }}

    steps:

      - name: Install the essgui package we just released.
        run: |
          wget ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/essgui_${{ github.ref_name }}_$(dpkg --print-architecture).deb
          sudo apt install --yes ./essgui_${{ github.ref_name }}_$(dpkg --print-architecture).deb

      - name: Install dlsh packages.
        run: |
          wget https://github.com/SheinbergLab/dlsh/releases/download/0.9.7/dlsh.zip -O dlsh.zip
          sudo mkdir -p /usr/local/dlsh
          sudo cp dlsh.zip /usr/local/dlsh

      - name: Sanity check the installed essgui.
        run: |
          ls -alth /usr/local/bin
          ls -alth /usr/local/lib
          essgui || echo "OK"