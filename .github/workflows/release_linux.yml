name: Release for Linux

on:
  push:
    tags:
      - '*'

jobs:

  release-dserv:

    strategy:
      matrix:
        # Build on not-the-latest to keep dependency versions modest.
        os: [ubuntu-22.04, ubuntu-22.04-arm]

    runs-on: ${{ matrix.os }}

    permissions:
      contents: write
      
    steps:

      - name: Check out our dserv code for the current tag.
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up a build environment.
        run: |
          sudo apt update
          sudo apt install -y git wget ca-certificates build-essential cmake zip unzip
          sudo apt install -y libevdev-dev zlib1g-dev pkg-config
          sudo apt install -y libjpeg-dev libjpeg62-turbo-dev python3-yaml python3-ply python3-jinja2

      - name: Set architecture-specific paths
        run: |
          if [ "$(dpkg --print-architecture)" = "arm64" ]; then
            echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib/aarch64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          else
            echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          fi

      - name: Cache libcamera build
        uses: actions/cache@v3
        id: cache-libcamera
        with:
          path: |
            /usr/local/lib/libcamera*
            /usr/local/include/libcamera
            /usr/local/lib/pkgconfig/libcamera.pc
            /usr/local/lib/x86_64-linux-gnu/pkgconfig/libcamera.pc
            /usr/local/lib/aarch64-linux-gnu/pkgconfig/libcamera.pc
          key: libcamera-v0.5.1-${{ runner.os }}-${{ runner.arch }}

      - name: Install modern libcamera from source
        if: steps.cache-libcamera.outputs.cache-hit != 'true'
        run: |
          # Install ninja build system
          sudo apt install -y ninja-build
          
          # Install newer meson via pip (Ubuntu 22.04's meson is too old)
          sudo apt install -y python3-pip
          sudo pip3 install meson
          
          # Verify meson version
          meson --version
        
          # Clone and build libcamera
          git clone https://git.libcamera.org/libcamera/libcamera.git
          cd libcamera
          git checkout v0.3.2  # Use a stable version
        
          # Configure and build
          meson setup build --prefix=/usr/local -Dpipelines=rpi/vc4,vimc -Dipas=rpi/vc4 -Dtest=false -Ddocumentation=disabled
          ninja -C build
          sudo ninja -C build install
        
          # Update library cache
          sudo ldconfig

      - name: Build position-independent JPEG library
        run: |
          # Download and build libjpeg-turbo with -fPIC
          wget https://github.com/libjpeg-turbo/libjpeg-turbo/archive/3.0.1.tar.gz
          tar -xzf 3.0.1.tar.gz
          cd libjpeg-turbo-3.0.1
          
          cmake -B build \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DENABLE_SHARED=OFF \
            -DENABLE_STATIC=ON
          
          cmake --build build
          sudo cmake --install build

      - name: Install TCL 9 to the build environment.
        run: |
          cd deps/tcl/unix/
          ./configure
          make
          sudo make install

      - name: Install Jansson to the build environment.
        run: |
          cd deps/jansson/
          cmake -B build
          cmake --build build
          sudo cmake --install build

      - name: Verify libcamera installation
        run: |
          echo "=== PKG_CONFIG_PATH ==="
          echo $PKG_CONFIG_PATH
        
          echo "=== Checking pkg-config for libcamera ==="
          pkg-config --exists libcamera && echo "libcamera found via pkg-config" || echo "libcamera NOT found via pkg-config"
          pkg-config --modversion libcamera 2>/dev/null || echo "No version info available"
          pkg-config --cflags libcamera 2>/dev/null || echo "No cflags available"
          pkg-config --libs libcamera 2>/dev/null || echo "No libs available"
        
          echo "=== Looking for libcamera pkg-config files ==="
          ls -la /usr/local/lib/pkgconfig/ | grep camera || echo "No camera pkg-config files found"
          ls -la /usr/local/lib/x86_64-linux-gnu/pkgconfig/ | grep camera || echo "No camera pkg-config files in x86_64 dir"
        
          echo "=== Looking for libcamera headers ==="
          ls -la /usr/local/include/ | grep camera || echo "No camera headers found"

      - name: Build dserv itself and package it for release.
        run: |
          cmake -D PROJECT_VERSION=${{ github.ref_name }} -B build
          cmake --build build --verbose
          cpack -G DEB --config build/CPackConfig.cmake

      - name: Create a GitHub release for the current tag and package.
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./*.deb"
          body: dserv version ${{ github.ref_name }}
          generateReleaseNotes: true
          allowUpdates: true

  release-essgui:

    strategy:
      matrix:
        # Build on not-the-latest to keep dependency versions modest.
        os: [ubuntu-22.04, ubuntu-22.04-arm]

    runs-on: ${{ matrix.os }}

    steps:

      - name: Check out our dserv code for the current tag.
        uses: actions/checkout@v4
        with:
            submodules: true

      - name: Set up a build environment.
        run: |
          sudo apt update
          sudo apt install -y git wget ca-certificates build-essential cmake zip unzip
          sudo apt install -y libpango1.0-dev libwayland-dev wayland-protocols libxkbcommon-dev libxinerama-dev libdbus-1-dev libglew-dev  libdecor-0-dev libgtk-3-dev liblz4-dev

      - name: Install TCL 9 to the build environment.
        run: |
          cd deps/tcl/unix/
          ./configure
          make
          sudo make install

      - name: Install Jansson to the build environment.
        run: |
          cd deps/jansson/
          cmake -B build
          cmake --build build
          sudo cmake --install build

      - name: Install FLTK GUI framework into the build environment.
        run: |
          cd deps/fltk/
          cmake -B build
          cmake --build build
          sudo cmake --install build

      - name: Install libharu PDF library into the build environment.
        run: |
          cd deps/libharu/
          cmake -DBUILD_SHARED_LIBS=OFF -B build
          cmake --build build
          sudo cmake --install build

      # TODO: obtain dlsh from SheinbergLab, not benjamin-heasly
      - name: Install our dlsh libs and headers into the build environment.
        run: |
          DLSH_VERSION=0.0.48
          wget https://github.com/benjamin-heasly/dlsh/releases/download/${DLSH_VERSION}/dlsh-dg_${DLSH_VERSION}_$(dpkg --print-architecture).deb
          wget https://github.com/benjamin-heasly/dlsh/releases/download/${DLSH_VERSION}/dlsh-dlsh_${DLSH_VERSION}_$(dpkg --print-architecture).deb
          sudo dpkg --install dlsh-dg_${DLSH_VERSION}_$(dpkg --print-architecture).deb
          sudo dpkg --install dlsh-dlsh_${DLSH_VERSION}_$(dpkg --print-architecture).deb

      - name: Install essgui itself and package for release.
        run: |
          cd tools/essgui
          cmake -D PROJECT_VERSION=${{ github.ref_name }} -B build
          cmake --build build
          cpack -G DEB --config build/CPackConfig.cmake

      - name: Create a GitHub release for the current tag and package.
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./tools/essgui/*.deb"
          body: dserv version ${{ github.ref_name }}
          generateReleaseNotes: true
          allowUpdates: true

  check-dserv:

    needs: release-dserv

    strategy:
      matrix:
        # Check on latest to confirm compatibility.
        os: [ubuntu-24.04, ubuntu-24.04-arm]

    runs-on: ${{ matrix.os }}

    steps:

      - name: Install the dserv package we just released.
        run: |
          wget ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/dserv_${{ github.ref_name }}_$(dpkg --print-architecture).deb
          sudo apt install --yes ./dserv_${{ github.ref_name }}_$(dpkg --print-architecture).deb

      - name: Install dlsh packages.
        run: |
          DLSH_VERSION=0.0.48
          wget https://github.com/benjamin-heasly/dlsh/releases/download/${DLSH_VERSION}/dlsh-${DLSH_VERSION}-Linux-$(dpkg --print-architecture).zip -O dlsh.zip
          sudo mkdir -p /usr/local/dlsh
          sudo cp dlsh.zip /usr/local/dlsh

      - name: Sanity check the installed dserv.
        run: |
          ls -alth /usr/local/bin
          ls -alth /usr/local/dserv/db
          echo "return 100" | essctrl
          /usr/local/dserv/dserv --help
          timeout --preserve-status --signal SIGINT 2 /usr/local/dserv/dserv -c /usr/local/dserv/config/dsconf.tcl -t /usr/local/dserv/config/triggers.tcl

  check-essgui:

    needs: release-essgui

    strategy:
      matrix:
        # Check on latest to confirm compatibility.
        os: [ubuntu-24.04, ubuntu-24.04-arm]

    runs-on: ${{ matrix.os }}

    steps:

      - name: Install the essgui package we just released.
        run: |
          wget ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/essgui_${{ github.ref_name }}_$(dpkg --print-architecture).deb
          sudo apt install --yes ./essgui_${{ github.ref_name }}_$(dpkg --print-architecture).deb

      - name: Install dlsh packages.
        run: |
          DLSH_VERSION=0.0.48
          wget https://github.com/benjamin-heasly/dlsh/releases/download/${DLSH_VERSION}/dlsh-${DLSH_VERSION}-Linux-$(dpkg --print-architecture).zip -O dlsh.zip
          sudo mkdir -p /usr/local/dlsh
          sudo cp dlsh.zip /usr/local/dlsh

      - name: Sanity check the installed essgui.
        run: |
          ls -alth /usr/local/bin
          ls -alth /usr/local/lib
          essgui || echo "OK"